----------------------------------------
	   DAMIAN CIPOLAT 

www.damiancipolat.com

----------------------------------------

En este archivo, explico la solucón llevada a cabo para cada uno de los puntos.

1) API Rest NodeJs:

Desarrolle un server que escucha conexiones en el puerto 5000,
se interactua con el mismo apartir de la url, ejemplo:

127.0.0.1:5000/search/mad/2017-07-01/2017-07-12/2-0

Tiene el formato:
IATA/checkin/checkout/rooms

rooms: 2-0 (2 adultos, 0 niños), planteo la combinación de habitaciones en una sintaxys de este tipo:
       2-1!4 	  -> 2 adultos 1 niño de 4 años
       2-1!4;1-0  -> 2 adultos 1 ñiño de 4 años y otra habitación de 1 adulto y 0 niños.

El api genera la lista de hoteles que es usada en el pto 2, cada vez que se hace un request,
el server genera al azar todos los datos de cada hotel y varia la disponibilidad, haciendo que la cantidad mostrada no sea siempre la misma,
los datos usados son todos de pruebas, exceptuando los nombres de los hoteles y las imagenes que las obtuve de un proyecto que
participe trabando con el proveedor Tourico Holidays.

En la implementación del api rest use Express JS, para poder trabajar con las rutas en las url aprovechando
los middleware que el framework ofrece.

Para generar la lista de hoteles, opte por usar el patron de diseño "Builder" programado en ES6,
el cual se encuentra en la carpeta /server/modules/ decido usar este patron, debido a que me simplifica la construcción de un mismo objeto,
encapsulando la forma en como se hace dentro de el y es facilmente usado por otros objetos.

Para ejecutar el server antes hacer un npm install.


2) Frontend:

Desarrolle usando Angular 1.5.6, Boostrap 3 para los estilos,
el sistema de grillas es el de 12 columnas provisto por boostrap.

Para el control del slider de rango de precios trabaje con un control del sig. repositorio https://github.com/angular-ui/ui-slider
que es una adaptación del slider de jquery ui pero para angular 1.

Para lograr el carrousel de cada hotel, desarrolle mi propio control volcando dicho codigo en una directiva 
<carrousel></carrousel> en angular en el archivo "./js/carrouselDirective.js"

Patrones de diseño:

Utilice el patron middleware (./js/service/filterService.js) en conjunto con el patron strategy (./js/service/filter.js)
para manejar las diferentes formas de filtrar.

Strategy:   opto por este patron dado que me permite encapsular algoritmos bajo un mismo metodo todas clases.
Middleware: lo uso para poder aplicar filtros recursivos en los resultados de cada filtrado.

Para mejorar el diseño de la aplicación, trabaje con servicios para separar las funcionalidades como los filtros y los ordenamientos,
y use una directiva para desarrollar el carrousel de fotos.

3) Extras/Plus

Para el examen utilice patrones de diseño en los puntos 1 y 2, ademas de usar en gran parte en ambos lados ES6,
tales como clases, let / cons y arrow functions.

Como best practices en angular, implemento las partes de mayores complejidad fuera del app.js en clases externas u servicios, ademas evito usar la variable
$scope, dejando el codigo de un estilo similiar a como se trabaja con Angular 2, orientando más a trabajar con componentes reutilizables.